/*
 * $Id$
 *
 * Jaak environment model is an open-source multiagent library.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014 St√©phane GALLAND.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.jaak.environment

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.jaak.environment.influence.DropDownInfluence
import io.sarl.jaak.environment.influence.MotionInfluence
import io.sarl.jaak.environment.influence.PickUpInfluence
import io.sarl.jaak.environment.influence.SemanticChangeInfluence
import io.sarl.jaak.environment.perception.EnvironmentalObject
import io.sarl.jaak.environment.perception.Perceivable
import io.sarl.jaak.kernel.JaakPhysicSpace
import io.sarl.jaak.kernel.JaakPhysicSpaceConstants
import io.sarl.jaak.kernel.JaakPhysicSpaceSpecification
import io.sarl.jaak.kernel.SkillBinder
import java.io.Serializable
import org.arakhne.afc.math.continous.object2d.Vector2f
import org.arakhne.afc.math.discrete.object2d.Point2i
import org.arakhne.afc.math.discrete.object2d.Vector2i

skill PhysicBodySkill implements PhysicBody {
	
	uses DefaultContextInteractions, Behaviors
	
	var physicSpace : JaakPhysicSpace
	
	var binder : SkillBinder
	
	var bufferedMotionInfluence : MotionInfluence
	
	def install() {
		var dc = defaultContext
		var spaceId = JaakPhysicSpaceConstants::getSpaceIDInContext(dc)
		physicSpace = dc.getOrCreateSpaceWithSpec(typeof(JaakPhysicSpaceSpecification), spaceId)
		if (physicSpace === null) {
			throw new IllegalStateException("No physic space found")
		}
		binder = new SkillBinder(asEventListener)
		physicSpace.spawnBody(binder.currentTime, binder.ID, binder)
	}
		
	def uninstall() {
		physicSpace?.killBody(binder.currentTime, binder.ID, binder)
		physicSpace = null
		binder = null
	}

	def mergeLinearMotion(x : int, y : int) {
		if (bufferedMotionInfluence === null) {
			bufferedMotionInfluence = new MotionInfluence(binder.body)
		}
		bufferedMotionInfluence.setLinearMotion(x, y)
	}

	def mergeAngularMotion(rad : float) {
		if (bufferedMotionInfluence === null) {
			bufferedMotionInfluence = new MotionInfluence(binder.body)
		}
		bufferedMotionInfluence.setAngularMotion(rad)
	}

	def synchronizeBody {
		if (bufferedMotionInfluence !== null) {
			physicSpace.influence(binder.currentTime, bufferedMotionInfluence)
			bufferedMotionInfluence = null
		}
		physicSpace.influence(binder.currentTime, null)
	}

	def move(direction : Vector2f, changeHeading : boolean) {
		mergeLinearMotion(direction.x(), direction.y())
		if (changeHeading) {
			heading = direction
		}
	}
	
	def move(direction : Vector2i, changeHeading : boolean) {
		mergeLinearMotion(direction.x(), direction.y())
		if (changeHeading) {
			heading = direction
		}
	}

	def move(direction : Vector2i) {
		move(direction, false)
	}

	def moveForward(cells : int) {
		var body = binder.body
		var view = body.headingVector.clone
		view.normalize
		view.scale(cells)
		mergeLinearMotion(view.x(), view.y())
	}
	
	def moveBackward(cells : int) {
		var body = binder.body
		var view = body.headingVector.clone
		view.normalize
		view.scale(-cells)
		mergeLinearMotion(view.x(), view.y())
	}

	def turnLeft(radians : float) {
		mergeAngularMotion(-radians)
	}

	def turnRight(radians : float) {
		mergeAngularMotion(radians)
	}

	def setHeading(radians : float) {
		var body = binder.body
		var v = radians - body.headingAngle;
		mergeAngularMotion(v)
	}
	
	def setHeading(direction : Vector2f) {
		heading = direction.orientationAngle
	}

	def setHeading(direction : Vector2i) {
		heading = direction.orientationAngle
	}

	def dropOff(object : EnvironmentalObject) {
		physicSpace.influence(binder.currentTime, new DropDownInfluence(binder.body, object))
	}

	//TODO: def pickUp(type : Class<T>) : T with T extends Perceivable
	def pickUp(type : Class<? extends Perceivable>) : Perceivable {
		var body = binder.body
		for(obj : body.perceivedObjects) {
			if (type.isInstance(obj) && body.position == obj.position) {
				physicSpace.influence(binder.currentTime, new PickUpInfluence(body, obj));
				return type.cast(obj);
			}
		}
		return null
	}

	def pickUp(object : EnvironmentalObject) {
		physicSpace.influence(binder.currentTime, new PickUpInfluence(binder.body, object))
	}

	//TODO: def touchUp(type : Class<T>) : T with T extends EnvironmentalObject
	def touchUp(type : Class<? extends EnvironmentalObject>) : EnvironmentalObject {
		for(obj : binder.body.perceivedObjects) {
			if (type.isInstance(obj) && position == obj.position) {
				return type.cast(obj);
			}
		}
		return null;
	}

	def setSemantic(semantic : Serializable) {
		physicSpace.influence(binder.currentTime, new SemanticChangeInfluence(semantic))
	}

	def getPosition : Point2i {
		binder.body.position
	}

	def getHeadingAngle : float {
		binder.body.headingAngle
	}

	def getHeadingVector : Vector2f {
		binder.body.headingVector
	}
	
	def getSemantic : Serializable {
		binder.body.semantic
	}

	def getSpeed : float {
		binder.body.speed
	}
	
	def getX : int {
		position.x()
	}

	def getY : int {
		position.y()
	}
	
}