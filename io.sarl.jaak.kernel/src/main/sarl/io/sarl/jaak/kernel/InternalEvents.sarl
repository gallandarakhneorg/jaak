/*
 * $Id$
 *
 * Jaak environment model is an open-source multiagent library.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014 St√©phane GALLAND.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.jaak.kernel

import io.sarl.jaak.environment.influence.Influence

event AbstractStampedEvent {
	val currentTime : float
	val lastStepDuration : float
	new(ct : float, lsd : float) {
		this.currentTime = ct
		this.lastStepDuration = lsd
	}
}

/** An agent is appearing.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
event TurtleCreated extends AbstractStampedEvent {
	var x : int
	var y : int
	var frustumType : String
	var frustumLength : int
	new(ct : float, lsd : float) {
		super(ct, lsd)
		x = -1
		y = -1
	}
}

/** An agent is desappearing
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
event TurtleDestroyed extends AbstractStampedEvent {
	new(ct : float, lsd : float) {
		super(ct, lsd)
	}
}
	
/** Notify the simulation engine that a 
 * simulation step must be executed.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
event ExecuteSimulationStep

/** Notify the simulation engine that an 
 * agent has sent an influence.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
event AgentInfluence extends AbstractStampedEvent {
	val influence : Influence
	new(ct : float, lsd : float, influence : Influence) {
		super(ct, lsd)
		this.influence = influence
	}
}

/** Notify the simulation engine that an 
 * agent want to be synchronized.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
event SynchronizeBody extends AbstractStampedEvent {
	new(ct : float, lsd : float) {
		super(ct, lsd)
	}
}
