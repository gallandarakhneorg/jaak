package io.sarl.jaak.demos.mdtraffic

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.jaak.demos.mdtraffic.behaviors.EmergencyDriver
import io.sarl.lang.core.Address
import io.sarl.lang.core.Behavior
import io.sarl.util.OpenEventSpace

/** This class defines a driver.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
agent Driver extends io.sarl.jaak.demos.traffic.Driver {

	uses DefaultContextInteractions

	var emitToEnvironmentSpace : OpenEventSpace
	var receiveFromEnvironmentSpace : OpenEventSpace
	var address : Address

	on Initialize {
		emitToEnvironmentSpace = defaultContext.getSpace(MultidimensionalTrafficConstants::AGENT_TO_ENVIRONMENT_COMMUNICATION_SPACE_ID)		
		receiveFromEnvironmentSpace = defaultContext.getSpace(MultidimensionalTrafficConstants::ENVIRONMENT_TO_AGENT_COMMUNICATION_SPACE_ID)
		address = receiveFromEnvironmentSpace.register(asEventListener)		

		//TODO: Replace by the "super(occurrence)" syntax when introduced.
		super._handle_Initialize_0(occurrence)
	}

	def createEmergencyDriverBehavior : Behavior {
		new EmergencyDriver(this, emitToEnvironmentSpace, address)
	}
	
}