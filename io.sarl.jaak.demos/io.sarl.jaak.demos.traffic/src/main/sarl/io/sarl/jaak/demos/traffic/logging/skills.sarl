package io.sarl.jaak.demos.traffic.logging

import io.sarl.jaak.demos.traffic.environment.Path
import java.io.File
import java.io.FileWriter
import java.io.PrintWriter
import org.arakhne.afc.math.discrete.object2d.Point2i

/** This skill defines the capacity to log simulation information from an agent.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
skill SimulationAgentLoggerSkill implements SimulationAgentLoggerCapacity {

	var logFile : File
	
	var t : float = 0
	var path : Path
	var emergencySirenPosition : Point2i
	var isStopDecidedWhenEmergency : boolean

	def install {
		var logFolder = SimulationLogger::logger.loggingFolder
		var agentFolder = new File(logFolder, "agents")
		agentFolder.mkdirs
		this.logFile = new File(agentFolder, "a_" + owner.ID + ".csv")
		var writer = new PrintWriter(this.logFile)
		writer.println("t\tSiren?\tSiren Position\tStop?\tPath")
		writer.close
	}
	
	def logPath(path : Path, t : float) {
		if (t < this.t) {
			throw new IllegalStateException
		}
		this.t = t
		this.path = path
	}
	
	def logEmergencySirenSignal(position : Point2i, isStopDecided : boolean, t : float) {
		if (t < this.t) {
			throw new IllegalStateException
		}
		this.emergencySirenPosition = position
		this.isStopDecidedWhenEmergency = isStopDecided
	}

	def synchronizeLogs {
		var fwriter = new FileWriter(this.logFile, true)
		var writer = new PrintWriter(fwriter)
		writer.print(this.t)
		writer.print("\t")
		writer.print(if (this.emergencySirenPosition !== null) 1 else 0)
		writer.print("\t")
		if (this.emergencySirenPosition !== null) {
			writer.print(this.emergencySirenPosition.x())
			writer.print(" ")
			writer.print(this.emergencySirenPosition.y())
		}
		writer.print("\t")
		writer.print(if (this.isStopDecidedWhenEmergency) 1 else 0)
		writer.print("\t")
		if (this.path !== null) {
			var isFirst = true
			for (p : path) {
				if (isFirst) {
					isFirst = false
				} else {
					writer.print(";")
				}
				writer.print(p.x())
				writer.print(" ")
				writer.print(p.y())
			}
		}
		writer.print("\n")
		writer.flush
		writer.close
	}
		
}
